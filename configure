#!/bin/bash

# terminal colors
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # reset

# parse command line arguments
RECONFIGURE=0
for arg in "$@"; do
  if [ "$arg" = "--reconfigure" ]; then
    RECONFIGURE=1
  fi
done

CONFIG_FILE=.config

# check if config already exists and not in reconfigure mode
if [ -f "$CONFIG_FILE" ] && [ $RECONFIGURE -eq 0 ]; then
  echo "${RED}error: configuration file $CONFIG_FILE already exists${NC}"
  echo "use --reconfigure to create a new configuration"
  exit 1
fi

# check required environment variables
if [ -z "$ARCH" ] || [ -z "$BUILD_DIR" ]; then
    echo "${RED}error: ARCH and BUILD_DIR must be set${NC}" >&2
    exit 1
fi

#
# Check Host Dependencies
#

echo "Checking for required dependencies..."
echo

missing_deps=0

# check if a command exists
check_command() {
  command -v "$1" &> /dev/null
}

check_dependency() {
  local cmd=$1
  local desc=$2
  if [ -z "$desc" ]; then
    desc=$cmd
  fi
  printf "%-20s" "$desc"
  if check_command "$cmd"; then
    echo -e "[${GREEN}FOUND${NC}]"
    return 0
  else
    echo -e "[${RED}MISSING${NC}]"
    missing_deps=$((missing_deps + 1))
    return 1
  fi
}

# check for all dependencies required to build the toolchain and os
check_dependency "gcc"
check_dependency "g++"
check_dependency "ld" "binutils"
check_dependency "pkg-config"
check_dependency "makeinfo" "texinfo"
check_dependency "autoconf"
check_dependency "clang"
check_dependency "lld-link" "lld"
check_dependency "llvm-ar" "llvm"
check_dependency "nasm"
check_dependency "mformat" "mtools"
check_dependency "iasl"
check_dependency "unzip"
check_dependency "wget"
check_dependency "python"
check_dependency "perl"
check_dependency "qemu-system-${ARCH}"

# autoconf version check
if check_command "autoconf"; then
  version=$(autoconf --version | head -n1 | awk '{print $NF}')
  printf "%-20s" "autoconf 2.69"
  if [[ "$version" == "2.69" ]]; then
    echo -e "[${GREEN}FOUND${NC}] (v$version)"
  else
    echo -e "[${RED}ERROR${NC}] (found v$version, needed v2.69)"
  fi
fi

# python version check
if check_command "python"; then
  py_version=$(python --version 2>&1 | awk '{print $2}')
  printf "%-20s" "python 3.9+"

  # extract major and minor version
  py_major=$(echo $py_version | cut -d. -f1)
  py_minor=$(echo $py_version | cut -d. -f2)

  if [[ "$py_major" -gt 3 ]] || [[ "$py_major" -eq 3 && "$py_minor" -ge 9 ]]; then
    echo -e "[${GREEN}FOUND${NC}] (v$py_version)"
  else
    echo -e "[${RED}ERROR${NC}] (found v$py_version, need v3.9+)"
    missing_deps=$((missing_deps + 1))
  fi
fi

echo ""
if [ $missing_deps -eq 0 ]; then
  echo -e "${GREEN}All dependencies are installed!${NC}"
else
  echo -e "${RED}Missing $missing_deps dependencies.${NC}"
  exit 1
fi

#
# Create Configuration File
#

PROJECT_DIR="$(pwd)"

# defaults
BUILD_DIR="$(realpath "$BUILD_DIR")"
TOOL_ROOT="$BUILD_DIR/toolchain"
SYS_ROOT="$BUILD_DIR/sysroot"
TOOLCHAIN="$ARCH-linux-musl"
QEMU="qemu-system-$ARCH"

function prompt_yn() {
  local prompt="$1"
  local response
  while true; do
    read -n 1 -r -p "$prompt (y/n) " response
    echo >&2
    case "$response" in
      y|n) printf "%s" "$response"; return ;;
      *) echo "invalid input, please enter 'y' or 'n'" >&2 ;;
    esac
  done
}

function prompt_line() {
  local prompt="$1"
  local response
  while true; do
    read -r -p "$prompt" response
    if [ -n "$response" ]; then
      echo "$response"
      return
    else
      echo "input cannot be empty" >&2
    fi
  done
}

# additional options
QEMU_BUILD_PLUGIN=$(prompt_yn "build the QEMU profiling plugin?")
if [ "$QEMU_BUILD_PLUGIN" = "y" ]; then
  QEMU_INCLUDE_DIR=$(prompt_line "QEMU include directory: ")
  QEMU_INCLUDE_DIR="$(realpath "$QEMU_INCLUDE_DIR")"
fi

config_content="ARCH := $ARCH
TOOLCHAIN := $TOOLCHAIN
PROJECT_DIR := $PROJECT_DIR
BUILD_DIR := $BUILD_DIR
TOOL_ROOT := $TOOL_ROOT
SYS_ROOT := $SYS_ROOT
QEMU := $QEMU"

if [ "$QEMU_BUILD_PLUGIN" = "y" ]; then
  config_content="$config_content
QEMU_BUILD_PLUGIN := y"
  if [ -n "$QEMU_INCLUDE_DIR" ]; then
    config_content="$config_content
QEMU_INCLUDE_DIR := $QEMU_INCLUDE_DIR"
  fi
else
  config_content="$config_content
QEMU_BUILD_PLUGIN := n"
fi

echo
echo "configuration:"
echo "--------------"
echo "$config_content"
echo

# prompt for confirmation
echo -n "confirm? (y)es/(n)o/(e)dit "
read -r -n1 response
echo
case "$response" in
  y)
    echo "$config_content" > $CONFIG_FILE
    echo "configuration saved to $CONFIG_FILE"
    ;;
  e)
    # create temp file for editing
    tmpfile=$(mktemp)
    echo "$config_content" > "$tmpfile"

    # open in editor
    ${EDITOR:-vi} "$tmpfile"

    # check if user saved
    if [ $? -eq 0 ]; then
      cp "$tmpfile" $CONFIG_FILE
      rm -f "$tmpfile"
      echo "configuration saved to $CONFIG_FILE"
    else
      echo "aborting."
      rm -f "$tmpfile"
      exit 1
    fi
    ;;
  *)
    echo "aborting."
    exit 1
    ;;
esac
